#!/usr/bin/env python3

import operator
import time
import string
import serial
import struct
import gevent
from gevent import sleep, spawn, Timeout
from gevent.queue import Queue
from robot import Robot
from random import randint
import sys

from gevent import monkey
monkey.patch_all()

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GLib

def idle():
    try:
        sleep(0.01)
    except:
        Gtk.main_quit()
    return True
GLib.idle_add(idle)

WAVE_AMP = 0.46
WAVE_LEN = 1

class InterfaceMonitor:
    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_title("Monitor")
        self.window.connect("destroy", self.destroy)        
        self.window.show()
        self.area = Gtk.DrawingArea()
        self.area.set_size_request(1024,700)
        self.area.connect("draw", self.area_expose_cb)
        self.area.show()
        self.window.add(self.area)
        self.x = 0.0
        self.old_inputs = [0,0,0,0,0,0]
        self.inputs = [0,0,0,0,0,0]
        self.robot = Robot('tetra')
        self.log = open('monitor.log', 'w')
        self.running = True
        self._get_info_thread = spawn(self._get_info_loop)
        
        sleep(0) # yields
        

    def area_expose_cb(self, area, event):
        INITIAL=0*WAVE_AMP
        SEPARATION=256*WAVE_AMP
        self.gc = area.get_property('window').cairo_create()
        #self.gc = area.get_window()
        #print(area.Style.fg.__dir__)
        #self.gc = area.get_style().fg_gc[Gtk.STATE_NORMAL]
        
        for i in range(len(self.inputs)):
            self.gc.set_line_width(1)
            self.gc.move_to(0, int(INITIAL+i*SEPARATION))
            self.gc.line_to(self.window.get_size()[0]-1, int(INITIAL+i*SEPARATION))
            self.gc.set_line_width(2)
            self.gc.move_to(int(self.x), int(INITIAL+i*SEPARATION+self.old_inputs[i]*WAVE_AMP))
            self.gc.line_to(int(self.x+WAVE_LEN), int(INITIAL+i*SEPARATION+self.inputs[i]*WAVE_AMP))
        return True

    def read_sensors (self):
        sleep(0.0001)
        return self.robot.get_sensors()
        #return [ randint(0,255) for i in range(6) ]

    def _get_info_loop (self):
        while self.running:
            self.old_inputs = self.inputs
            self.inputs = [self.read_sensors()[0],128,128,128,128,128]
            self.x = self.x + WAVE_LEN
            if self.x >= self.window.get_size()[0]:
                self.area.queue_draw()
                self.x = 0.0
            else:
                self.area_expose_cb(self.area, None)

    def destroy (self, widget):
        self.running = False
        self._get_info_thread.join()
        Gtk.main_quit()
        
def main():
    Gtk.main()
    return 0

if __name__ == "__main__":
    InterfaceMonitor()
    main()


